"""
Telegram bot implementation using aiogram.
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from django.conf import settings
from django.contrib.auth.models import User
from tasks.models import Task, UserProfile
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


def send_message_to_user(chat_id, message):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        asyncio.create_task(bot.send_message(chat_id, message))
        return True
    except Exception as e:
        logger.error(f"Error sending message to {chat_id}: {str(e)}")
        return False


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        user_profile = UserProfile.objects.get(telegram_chat_id=chat_id)
        user = user_profile.user

        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
            "/overdue - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "/help - –ø–æ–º–æ—â—å"
        )
    except UserProfile.DoesNotExist:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è "
            "–≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å Telegram.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:\n"
            f"`{chat_id}`\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            parse_mode='Markdown'
        )


@dp.message(Command("link"))
async def link_account(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    chat_id = message.chat.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
    try:
        UserProfile.objects.get(telegram_chat_id=chat_id)
        await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram!")
        return
    except UserProfile.DoesNotExist:
        pass

    await message.answer(
        "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n"
        "–ü—Ä–∏–º–µ—Ä: `myusername`",
        parse_mode='Markdown'
    )
    user_states[chat_id] = 'waiting_username'


@dp.message(Command("tasks"))
async def show_tasks(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id

    try:
        user_profile = UserProfile.objects.get(telegram_chat_id=chat_id)
        user = user_profile.user

        tasks = Task.objects.filter(
            assigned_to=user).order_by('-created_at')[:10]

        if not tasks:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return

        response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
        for task in tasks:
            status_emoji = {
                'pending': '‚è≥',
                'in_progress': 'üîÑ',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(task.status, '‚ùì')

            priority_emoji = {
                'low': 'üü¢',
                'medium': 'üü°',
                'high': 'üî¥'
            }.get(task.priority, '‚ö™')

            due_date = ""
            if task.due_date:
                due_date = f"\nüìÖ –°—Ä–æ–∫: {task.due_date.strftime('%d.%m.%Y %H:%M')}"

            response += (
                f"{status_emoji} {priority_emoji} *{task.title}*\n"
                f"üìù {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {task.get_status_display()}\n"
                f"üè∑Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {task.get_priority_display()}{due_date}\n"
                f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {task.created_by.username}\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_tasks")],
            [InlineKeyboardButton(
                text="üìã –í—Å–µ –∑–∞–¥–∞—á–∏", url=f"{settings.ALLOWED_HOSTS[0] if settings.ALLOWED_HOSTS else 'localhost'}/")]
        ])

        await message.answer(response, parse_mode='Markdown', reply_markup=keyboard)

    except UserProfile.DoesNotExist:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link")


@dp.message(Command("overdue"))
async def show_overdue_tasks(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
    chat_id = message.chat.id

    try:
        user_profile = UserProfile.objects.get(telegram_chat_id=chat_id)
        user = user_profile.user

        from django.utils import timezone
        now = timezone.now()
        overdue_tasks = Task.objects.filter(
            assigned_to=user,
            due_date__lt=now,
            status__in=['pending', 'in_progress']
        ).order_by('due_date')

        if not overdue_tasks:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á! üéâ")
            return

        response = "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        for task in overdue_tasks:
            days_overdue = (now - task.due_date).days
            response += (
                f"‚ö†Ô∏è *{task.title}*\n"
                f"üìÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {days_overdue} –¥–Ω.\n"
                f"üìù {task.description[:100]}{'...' if len(task.description) > 100 else ''}\n\n"
            )

        await message.answer(response, parse_mode='Markdown')

    except UserProfile.DoesNotExist:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link")


@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "ü§ñ *–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/link - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n"
        "/tasks - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏\n"
        "/overdue - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
    )
    await message.answer(help_text, parse_mode='Markdown')


@dp.callback_query(F.data == "refresh_tasks")
async def refresh_tasks_callback(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    await callback.answer("–û–±–Ω–æ–≤–ª—è–µ–º...")
    await show_tasks(callback.message)


@dp.message()
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    text = message.text

    if chat_id in user_states and user_states[chat_id] == 'waiting_username':
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç username –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        username = text.strip()

        try:
            user = User.objects.get(username=username)
            user_profile, created = UserProfile.objects.get_or_create(
                user=user,
                defaults={'telegram_chat_id': chat_id,
                          'telegram_username': message.from_user.username}
            )

            if not created:
                user_profile.telegram_chat_id = chat_id
                user_profile.telegram_username = message.from_user.username
                user_profile.save()

            del user_states[chat_id]
            await message.answer(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n\n"
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or user.username}!\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á."
            )

        except User.DoesNotExist:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    else:
        await message.answer(
            "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )


async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {str(e)}")


def run_bot():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    asyncio.run(start_bot())
