#!/usr/bin/env python
"""
–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
"""
import os
import sys
import subprocess
import time
import signal
from multiprocessing import Process
import threading


def run_command(command, name):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    try:
        print(f"–ó–∞–ø—É—Å–∫ {name}...")
        result = subprocess.run(command, shell=True, check=True)
        print(f"{name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º {result.returncode}")
    except subprocess.CalledProcessError as e:
        print(f"–û—à–∏–±–∫–∞ –≤ {name}: {e}")
    except KeyboardInterrupt:
        print(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if sys.version_info < (3, 8):
        print("–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .env
    if not os.path.exists('.env'):
        print("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
        if os.path.exists('env.example'):
            with open('env.example', 'r') as f:
                content = f.read()
            with open('.env', 'w') as f:
                f.write(content)
            print("–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        else:
            print("–û—à–∏–±–∫–∞: –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)

    print("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã ‚úì")


def setup_database():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        subprocess.run([sys.executable, "manage.py", "migrate"], check=True)
        print("–ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úì")

        # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        from django.contrib.auth.models import User
        if not User.objects.filter(username='admin').exists():
            User.objects.create_superuser(
                'admin', 'admin@example.com', 'admin123')
            print("–°–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin/admin123 ‚úì")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üöÄ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò")
    print("=" * 60)
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    check_dependencies()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'task_manager.settings')

    try:
        import django
        django.setup()
        setup_database()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Django: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
        sys.exit(1)

    print()
    print("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:")
    print("‚Ä¢ Django —Å–µ—Ä–≤–µ—Ä (http://localhost:8000)")
    print("‚Ä¢ Celery worker (—Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏)")
    print("‚Ä¢ Telegram –±–æ—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω)")
    print("‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏")
    print()
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 60)
    print()

    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    processes = []

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Django —Å–µ—Ä–≤–µ—Ä
        p1 = Process(target=run_command, args=(
            "python run_server.py", "Django —Å–µ—Ä–≤–µ—Ä"))
        p1.start()
        processes.append(p1)

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        time.sleep(2)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery worker
        p2 = Process(target=run_command, args=(
            "python run_celery.py", "Celery worker"))
        p2.start()
        processes.append(p2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram
        from django.conf import settings
        if hasattr(settings, 'TELEGRAM_BOT_TOKEN') and settings.TELEGRAM_BOT_TOKEN:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç
            p3 = Process(target=run_command, args=(
                "python run_telegram_bot.py", "Telegram –±–æ—Ç"))
            p3.start()
            processes.append(p3)
        else:
            print("‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. Telegram –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        p4 = Process(target=run_command, args=(
            "celery -A task_manager beat --loglevel=info", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"))
        p4.start()
        processes.append(p4)

        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:8000")
        print("üì± Telegram –±–æ—Ç: –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram")
        print()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for p in processes:
            p.join()

    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        for p in processes:
            if p.is_alive():
                p.terminate()
                p.join(timeout=5)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        for p in processes:
            if p.is_alive():
                p.terminate()
        sys.exit(1)


if __name__ == "__main__":
    main()
